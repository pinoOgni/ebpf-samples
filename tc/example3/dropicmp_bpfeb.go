// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadDropicmp returns the embedded CollectionSpec for dropicmp.
func loadDropicmp() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_DropicmpBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load dropicmp: %w", err)
	}

	return spec, err
}

// loadDropicmpObjects loads dropicmp and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*dropicmpObjects
//	*dropicmpPrograms
//	*dropicmpMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadDropicmpObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadDropicmp()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// dropicmpSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type dropicmpSpecs struct {
	dropicmpProgramSpecs
	dropicmpMapSpecs
}

// dropicmpSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type dropicmpProgramSpecs struct {
	TcIngressF *ebpf.ProgramSpec `ebpf:"tc_ingress_f"`
}

// dropicmpMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type dropicmpMapSpecs struct {
	DroppedMap *ebpf.MapSpec `ebpf:"dropped_map"`
}

// dropicmpObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadDropicmpObjects or ebpf.CollectionSpec.LoadAndAssign.
type dropicmpObjects struct {
	dropicmpPrograms
	dropicmpMaps
}

func (o *dropicmpObjects) Close() error {
	return _DropicmpClose(
		&o.dropicmpPrograms,
		&o.dropicmpMaps,
	)
}

// dropicmpMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadDropicmpObjects or ebpf.CollectionSpec.LoadAndAssign.
type dropicmpMaps struct {
	DroppedMap *ebpf.Map `ebpf:"dropped_map"`
}

func (m *dropicmpMaps) Close() error {
	return _DropicmpClose(
		m.DroppedMap,
	)
}

// dropicmpPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadDropicmpObjects or ebpf.CollectionSpec.LoadAndAssign.
type dropicmpPrograms struct {
	TcIngressF *ebpf.Program `ebpf:"tc_ingress_f"`
}

func (p *dropicmpPrograms) Close() error {
	return _DropicmpClose(
		p.TcIngressF,
	)
}

func _DropicmpClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed dropicmp_bpfeb.o
var _DropicmpBytes []byte
